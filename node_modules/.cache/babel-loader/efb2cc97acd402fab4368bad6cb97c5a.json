{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { PureComponent } from 'react';\nimport Chart from './Chart';\nimport ChartWrapper from './ChartWrapper';\nimport { Provider } from './Context';\nexport default class OrgChart extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      data: this.props.data,\n      willDropNodeId: null,\n      didMountNodeId: null,\n      draggingNodeProps: null,\n      disableDropNodeId: null\n    });\n\n    _defineProperty(this, \"getNodeId\", (type, id) => {\n      this.setState({\n        [type]: id\n      }, () => {\n        if (type === 'didMountNodeId') {\n          this.clearDidMountNode();\n        }\n      });\n    });\n\n    _defineProperty(this, \"moveNode\", (dropId, dragId) => {\n      const data = this.state.data;\n      const dragNode = getNode(data, dragId, true);\n      const dropNode = getNode(data, dropId);\n      if (!dropNode || !dragNode) return;\n      const children = dropNode.children || [];\n      dropNode.children = [...children, dragNode];\n      this.setState({\n        data: [...clearIdentify(data)]\n      });\n    });\n\n    _defineProperty(this, \"setIdentify\", (id, droppable) => {\n      const data = this.state.data;\n      const identifyData = setIdentify(data, id, droppable);\n      this.setState({\n        data: [...identifyData]\n      });\n    });\n  }\n\n  clearDidMountNode() {\n    setTimeout(() => {\n      this.setState({\n        didMountNodeId: null\n      });\n    }, 2000);\n  }\n\n  render() {\n    const _this$state = this.state,\n          data = _this$state.data,\n          willDropNodeId = _this$state.willDropNodeId,\n          didMountNodeId = _this$state.didMountNodeId,\n          draggingNodeProps = _this$state.draggingNodeProps,\n          disableDropNodeId = _this$state.disableDropNodeId;\n    const _this$props = this.props,\n          pan = _this$props.pan,\n          draggable = _this$props.draggable,\n          zoom = _this$props.zoom,\n          nodeRender = _this$props.nodeRender,\n          extraRender = _this$props.extraRender,\n          maxZoom = _this$props.maxZoom,\n          minZoom = _this$props.minZoom,\n          zoomStep = _this$props.zoomStep,\n          dragMode = _this$props.dragMode,\n          customDrag = _this$props.customDrag;\n    return React.createElement(Provider, {\n      value: {\n        dragMode,\n        draggable,\n        customDrag,\n        nodeRender,\n        extraRender,\n        willDropNodeId,\n        didMountNodeId,\n        disableDropNodeId,\n        draggingNodeProps,\n        moveNode: this.moveNode,\n        setIdentify: this.setIdentify,\n        getNodeId: this.getNodeId\n      }\n    }, React.createElement(ChartWrapper, {\n      pan: pan,\n      zoom: zoom,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      zoomStep: zoomStep\n    }, data.map(item => {\n      const id = item.id;\n      return React.createElement(Chart, {\n        key: id,\n        data: item\n      });\n    })));\n  }\n\n}\n\n_defineProperty(OrgChart, \"defaultProps\", {\n  dragMode: 'node'\n});\n\nconst getNode = (data, targetId, isDelete) => {\n  for (const item of data) {\n    const id = item.id,\n          _item$children = item.children,\n          children = _item$children === void 0 ? [] : _item$children;\n\n    if (targetId === id) {\n      if (isDelete) {\n        const index = data.indexOf(item);\n        data.splice(index, 1);\n      }\n\n      return item;\n    } else {\n      const node = getNode(children, targetId, isDelete);\n\n      if (node) {\n        return node;\n      }\n    }\n  }\n};\n\nconst setIdentify = (data, targetId, droppable) => {\n  data.forEach(item => {\n    const id = item.id,\n          _item$children2 = item.children,\n          children = _item$children2 === void 0 ? [] : _item$children2;\n\n    if (targetId !== id) {\n      item.droppable = droppable;\n      setIdentify(children, targetId, droppable);\n    }\n  });\n  return data;\n};\n\nconst clearIdentify = data => {\n  data.forEach(item => {\n    const _item$children3 = item.children,\n          children = _item$children3 === void 0 ? [] : _item$children3;\n    item.droppable = false;\n    setIdentify(children);\n  });\n  return data;\n};","map":null,"metadata":{},"sourceType":"module"}