{"ast":null,"code":"import { FETCH_VTCS, NEW_VTC, DELETE_VTC, EDIT_VTC, SELECT_VTC } from './types';\nimport { message } from 'antd';\nconst AUTH_TOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiZXhwIjoxNTYxNDA1Mjc3LCJwcml2IjoiZnVsbCIsInJhbmQiOiJERmc5WEpEbyIsInVzZXJfbmFtZSI6ImFkbWluIn0.Esizx8J0Jea9FW8RiJw84sbZMkoB0CgLn3_LR5cpDMg\";\nexport const fetchVTCS = () => dispatch => {\n  fetch('https://localhost:3004/api/vtcs?offset=0&limit=1000&fields=*&filter=&related=*', {\n    method: 'GET',\n    headers: {\n      'X-DISPERSIVE-SESSION-TOKEN': AUTH_TOKEN\n    }\n  }).then(response => response.json()).then(data => dispatch({\n    type: FETCH_VTCS,\n    payload: data.resource\n  })).catch(error => {\n    message.error(\"VTCs not fetched. \" + error.toString());\n  });\n};\nexport const createVTC = requestData => dispatch => {\n  fetch('https://localhost:3004/api/vtcs?fields=*&related=*', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-DISPERSIVE-SESSION-TOKEN': AUTH_TOKEN\n    },\n    body: \"{\\\"\" + \"resource\" + \"\\\"\" + \" : [\" + JSON.stringify(requestData) + \"] }\"\n  }).then(response => response.json()).then(data => dispatch({\n    type: NEW_VTC,\n    payload: data.resource[0] //Remember that .resource is an array of VTCs\n\n  })).catch(error => {\n    message.error(\"VTC not created. \" + error.toString());\n  });\n};\nexport const editVTC = requestData => dispatch => {\n  fetch('https://localhost:3004/api/vtcs?fields=*&related=*', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-DISPERSIVE-SESSION-TOKEN': AUTH_TOKEN\n    },\n    body: \"{\\\"\" + \"resource\" + \"\\\"\" + \" : [\" + JSON.stringify(requestData) + \"] }\"\n  }).then(response => response.json()).then(data => dispatch({\n    type: EDIT_VTC,\n    payload: data.resource[0] //Remember that .resource is an array of VTCs\n\n  })).catch(error => {\n    message.error(\"VTC not updated. \" + error.toString());\n  });\n};\nexport const deleteVTC = requestData => dispatch => {\n  fetch('https://localhost:3004/api/vtcs?fields=*&related=*', {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-DISPERSIVE-SESSION-TOKEN': AUTH_TOKEN\n    },\n    body: \"{\\\"\" + \"resource\" + \"\\\"\" + \" : [\" + JSON.stringify(requestData) + \"]}\"\n  }).then(response => response.json()).then(data => dispatch({\n    type: DELETE_VTC\n  })).catch(error => {\n    message.error(\"VTC not deleted. \" + error.toString());\n  });\n};\nexport const selectVTC = selected_vtc_id => dispatch => {\n  fetch('https://localhost:3004/api/vtcs/' + selected_vtc_id + '?fields=*&related=*', {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-DISPERSIVE-SESSION-TOKEN': AUTH_TOKEN\n    }\n  }).then(response => response.json()).then(data => dispatch({\n    type: SELECT_VTC,\n    payload: data.resource[0] //Remember that .resource is an array of VTCs\n\n  })).catch(error => {\n    message.error(\"VTC not selected. \" + error.toString());\n  });\n};","map":{"version":3,"sources":["/Users/aserna/Desktop/service-prov-dash/src/actions/VTC_Actions.js"],"names":["FETCH_VTCS","NEW_VTC","DELETE_VTC","EDIT_VTC","SELECT_VTC","message","AUTH_TOKEN","fetchVTCS","dispatch","fetch","method","headers","then","response","json","data","type","payload","resource","catch","error","toString","createVTC","requestData","body","JSON","stringify","editVTC","deleteVTC","selectVTC","selected_vtc_id"],"mappings":"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","sourcesContent":["import { FETCH_VTCS, NEW_VTC, DELETE_VTC, EDIT_VTC, SELECT_VTC } from './types';\nimport { message } from 'antd';\n\nconst AUTH_TOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiZXhwIjoxNTYxNDA1Mjc3LCJwcml2IjoiZnVsbCIsInJhbmQiOiJERmc5WEpEbyIsInVzZXJfbmFtZSI6ImFkbWluIn0.Esizx8J0Jea9FW8RiJw84sbZMkoB0CgLn3_LR5cpDMg\";\n\nexport const fetchVTCS = () => dispatch => {\n    fetch('https://localhost:3004/api/vtcs?offset=0&limit=1000&fields=*&filter=&related=*', {\n        method: 'GET',\n        headers: {\n            'X-DISPERSIVE-SESSION-TOKEN': AUTH_TOKEN\n        }\n    })\n        .then(response => response.json())\n        .then(data => dispatch({\n            type: FETCH_VTCS,\n            payload: data.resource\n        }))\n        .catch(error => {\n            message.error(\"VTCs not fetched. \" + error.toString());\n        });\n};\n\nexport const createVTC = (requestData) => dispatch => {\n    fetch('https://localhost:3004/api/vtcs?fields=*&related=*', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-DISPERSIVE-SESSION-TOKEN': AUTH_TOKEN\n        },\n        body: \"{\\\"\" + \"resource\" + \"\\\"\" + \" : [\" + JSON.stringify(requestData) + \"] }\"\n    })\n        .then(response => response.json())\n        .then(data => dispatch({\n            type: NEW_VTC,\n            payload: data.resource[0] //Remember that .resource is an array of VTCs\n        }))\n        .catch(error => {\n            message.error(\"VTC not created. \" + error.toString());\n        });\n};\n\nexport const editVTC = (requestData) => dispatch => {\n    fetch('https://localhost:3004/api/vtcs?fields=*&related=*', {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-DISPERSIVE-SESSION-TOKEN': AUTH_TOKEN\n        },\n        body: \"{\\\"\" + \"resource\" + \"\\\"\" + \" : [\" + JSON.stringify(requestData) + \"] }\"\n    })\n        .then(response => response.json())\n        .then(data => dispatch({\n            type: EDIT_VTC,\n            payload: data.resource[0] //Remember that .resource is an array of VTCs\n        }))\n        .catch(error => {\n            message.error(\"VTC not updated. \" + error.toString());\n        });\n};\n\nexport const deleteVTC = (requestData) => dispatch => {\n    fetch('https://localhost:3004/api/vtcs?fields=*&related=*', {\n        method: 'DELETE',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-DISPERSIVE-SESSION-TOKEN': AUTH_TOKEN\n        },\n        body: \"{\\\"\" + \"resource\" + \"\\\"\" + \" : [\" + JSON.stringify(requestData) + \"]}\"\n    })\n        .then(response => response.json())\n        .then(data => dispatch({\n            type: DELETE_VTC\n        }))\n        .catch(error => {\n            message.error(\"VTC not deleted. \" + error.toString());\n        });\n};\n\nexport const selectVTC = (selected_vtc_id) => dispatch => {\n    fetch('https://localhost:3004/api/vtcs/' + selected_vtc_id + '?fields=*&related=*', {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-DISPERSIVE-SESSION-TOKEN': AUTH_TOKEN\n        },\n    })\n        .then(response => response.json())\n        .then(data => dispatch({\n            type: SELECT_VTC,\n            payload: data.resource[0] //Remember that .resource is an array of VTCs\n        }))\n        .catch(error => {\n            message.error(\"VTC not selected. \" + error.toString());\n        });\n};\n\n"]},"metadata":{},"sourceType":"module"}