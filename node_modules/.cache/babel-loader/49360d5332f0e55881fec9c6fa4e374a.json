{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { PureComponent } from 'react';\nimport Chart from './Chart';\nimport ChartWrapper from './ChartWrapper';\nimport { Provider } from './Context';\nexport default class OrgChart extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      data: this.props.data,\n      willDropNodeId: null,\n      didMountNodeId: null,\n      draggingNodeProps: null,\n      disableDropNodeId: null\n    });\n\n    _defineProperty(this, \"getNodeId\", (type, id) => {\n      this.setState({\n        [type]: id\n      }, () => {\n        if (type === 'didMountNodeId') {\n          this.clearDidMountNode();\n        }\n      });\n    });\n\n    _defineProperty(this, \"moveNode\", (dropId, dragId) => {\n      const data = this.state.data;\n      const dragNode = getNode(data, dragId, true);\n      const dropNode = getNode(data, dropId);\n      if (!dropNode || !dragNode) return;\n      const children = dropNode.children || [];\n      dropNode.children = [...children, dragNode];\n      this.setState({\n        data: [...clearIdentify(data)]\n      });\n    });\n\n    _defineProperty(this, \"setIdentify\", (id, droppable) => {\n      const data = this.state.data;\n      const identifyData = setIdentify(data, id, droppable);\n      this.setState({\n        data: [...identifyData]\n      });\n    });\n  }\n\n  clearDidMountNode() {\n    setTimeout(() => {\n      this.setState({\n        didMountNodeId: null\n      });\n    }, 2000);\n  }\n\n  render() {\n    const _this$state = this.state,\n          data = _this$state.data,\n          willDropNodeId = _this$state.willDropNodeId,\n          didMountNodeId = _this$state.didMountNodeId,\n          draggingNodeProps = _this$state.draggingNodeProps,\n          disableDropNodeId = _this$state.disableDropNodeId;\n    const _this$props = this.props,\n          pan = _this$props.pan,\n          draggable = _this$props.draggable,\n          zoom = _this$props.zoom,\n          nodeRender = _this$props.nodeRender,\n          extraRender = _this$props.extraRender,\n          maxZoom = _this$props.maxZoom,\n          minZoom = _this$props.minZoom,\n          zoomStep = _this$props.zoomStep,\n          dragMode = _this$props.dragMode,\n          customDrag = _this$props.customDrag;\n    return React.createElement(Provider, {\n      value: {\n        dragMode,\n        draggable,\n        customDrag,\n        nodeRender,\n        extraRender,\n        willDropNodeId,\n        didMountNodeId,\n        disableDropNodeId,\n        draggingNodeProps,\n        moveNode: this.moveNode,\n        setIdentify: this.setIdentify,\n        getNodeId: this.getNodeId\n      }\n    }, React.createElement(ChartWrapper, {\n      pan: pan,\n      zoom: zoom,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      zoomStep: zoomStep\n    }, data.map(item => {\n      const id = item.id;\n      return React.createElement(Chart, {\n        key: id,\n        data: item\n      });\n    })));\n  }\n\n}\n\n_defineProperty(OrgChart, \"defaultProps\", {\n  dragMode: 'node'\n});\n\nconst getNode = (data, targetId, isDelete) => {\n  for (const item of data) {\n    const id = item.id,\n          _item$children = item.children,\n          children = _item$children === void 0 ? [] : _item$children;\n\n    if (targetId === id) {\n      if (isDelete) {\n        const index = data.indexOf(item);\n        data.splice(index, 1);\n      }\n\n      return item;\n    } else {\n      const node = getNode(children, targetId, isDelete);\n\n      if (node) {\n        return node;\n      }\n    }\n  }\n};\n\nconst setIdentify = (data, targetId, droppable) => {\n  data.forEach(item => {\n    const id = item.id,\n          _item$children2 = item.children,\n          children = _item$children2 === void 0 ? [] : _item$children2;\n\n    if (targetId !== id) {\n      item.droppable = droppable;\n      setIdentify(children, targetId, droppable);\n    }\n  });\n  return data;\n};\n\nconst clearIdentify = data => {\n  data.forEach(item => {\n    const _item$children3 = item.children,\n          children = _item$children3 === void 0 ? [] : _item$children3;\n    item.droppable = false;\n    setIdentify(children);\n  });\n  return data;\n};","map":{"version":3,"sources":["/Users/aserna/Desktop/service-prov-dash/src/lib/index.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","React","PureComponent","Chart","ChartWrapper","Provider","OrgChart","constructor","args","data","props","willDropNodeId","didMountNodeId","draggingNodeProps","disableDropNodeId","type","id","setState","clearDidMountNode","dropId","dragId","state","dragNode","getNode","dropNode","children","clearIdentify","droppable","identifyData","setIdentify","setTimeout","render","pan","draggable","zoom","nodeRender","extraRender","maxZoom","minZoom","zoomStep","dragMode","customDrag","createElement","moveNode","getNodeId","map","item","targetId","isDelete","index","indexOf","splice","node","forEach"],"mappings":"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","sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport Chart from './Chart';\nimport ChartWrapper from './ChartWrapper';\nimport { Provider } from './Context';\nexport default class OrgChart extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      data: this.props.data,\n      willDropNodeId: null,\n      didMountNodeId: null,\n      draggingNodeProps: null,\n      disableDropNodeId: null\n    });\n\n    _defineProperty(this, \"getNodeId\", (type, id) => {\n      this.setState({\n        [type]: id\n      }, () => {\n        if (type === 'didMountNodeId') {\n          this.clearDidMountNode();\n        }\n      });\n    });\n\n    _defineProperty(this, \"moveNode\", (dropId, dragId) => {\n      const {\n        data\n      } = this.state;\n      const dragNode = getNode(data, dragId, true);\n      const dropNode = getNode(data, dropId);\n      if (!dropNode || !dragNode) return;\n      const children = dropNode.children || [];\n      dropNode.children = [...children, dragNode];\n      this.setState({\n        data: [...clearIdentify(data)]\n      });\n    });\n\n    _defineProperty(this, \"setIdentify\", (id, droppable) => {\n      const {\n        data\n      } = this.state;\n      const identifyData = setIdentify(data, id, droppable);\n      this.setState({\n        data: [...identifyData]\n      });\n    });\n  }\n\n  clearDidMountNode() {\n    setTimeout(() => {\n      this.setState({\n        didMountNodeId: null\n      });\n    }, 2000);\n  }\n\n  render() {\n    const {\n      data,\n      willDropNodeId,\n      didMountNodeId,\n      draggingNodeProps,\n      disableDropNodeId\n    } = this.state;\n    const {\n      pan,\n      draggable,\n      zoom,\n      nodeRender,\n      extraRender,\n      maxZoom,\n      minZoom,\n      zoomStep,\n      dragMode,\n      customDrag\n    } = this.props;\n    return React.createElement(Provider, {\n      value: {\n        dragMode,\n        draggable,\n        customDrag,\n        nodeRender,\n        extraRender,\n        willDropNodeId,\n        didMountNodeId,\n        disableDropNodeId,\n        draggingNodeProps,\n        moveNode: this.moveNode,\n        setIdentify: this.setIdentify,\n        getNodeId: this.getNodeId\n      }\n    }, React.createElement(ChartWrapper, {\n      pan: pan,\n      zoom: zoom,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      zoomStep: zoomStep\n    }, data.map(item => {\n      const {\n        id\n      } = item;\n      return React.createElement(Chart, {\n        key: id,\n        data: item\n      });\n    })));\n  }\n\n}\n\n_defineProperty(OrgChart, \"defaultProps\", {\n  dragMode: 'node'\n});\n\nconst getNode = (data, targetId, isDelete) => {\n  for (const item of data) {\n    const {\n      id,\n      children = []\n    } = item;\n\n    if (targetId === id) {\n      if (isDelete) {\n        const index = data.indexOf(item);\n        data.splice(index, 1);\n      }\n\n      return item;\n    } else {\n      const node = getNode(children, targetId, isDelete);\n\n      if (node) {\n        return node;\n      }\n    }\n  }\n};\n\nconst setIdentify = (data, targetId, droppable) => {\n  data.forEach(item => {\n    const {\n      id,\n      children = []\n    } = item;\n\n    if (targetId !== id) {\n      item.droppable = droppable;\n      setIdentify(children, targetId, droppable);\n    }\n  });\n  return data;\n};\n\nconst clearIdentify = data => {\n  data.forEach(item => {\n    const {\n      children = []\n    } = item;\n    item.droppable = false;\n    setIdentify(children);\n  });\n  return data;\n};"]},"metadata":{},"sourceType":"module"}