{"ast":null,"code":"var _jsxFileName = \"/Users/aserna/Desktop/service-prov-dash/src/components/TreeView.js\";\nimport React, { Component } from 'react';\nimport Tree from 'react-tree-graph';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchVTCS } from '../actions/VTC_Actions';\nimport 'react-tree-graph/dist/style.css';\nimport '../App.css';\nlet data = {\n  name: 'Parent',\n  children: [{\n    name: 'Child 1',\n    children: [{\n      name: 'Child 3 '\n    }, {\n      name: 'Child 4 '\n    }, {\n      name: 'Child 5 '\n    }, {\n      name: 'Child 6 '\n    }]\n  }, {\n    name: 'Child 2'\n  }]\n};\n\nclass TreeView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      vtcs: [],\n      vtcsOnDisplay: [],\n      //need 2 different kinds of VTC arrays for search functionality\n      loaded: false\n    };\n  }\n\n  componentWillMount() {\n    this.props.fetchVTCS();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    let editted = false;\n\n    if (nextProps.newVTC) {\n      if (!(typeof nextProps.newVTC.vtc_id == \"undefined\")) {\n        for (var i = 0; i < this.state.vtcsOnDisplay.length; i++) {\n          if (this.state.vtcsOnDisplay[i].vtc_id == nextProps.newVTC.vtc_id) {\n            this.state.vtcsOnDisplay.splice(i, 1);\n            editted = true;\n          }\n        }\n\n        for (var i = 0; i < this.state.vtcs.length; i++) {\n          if (this.state.vtcs[i].vtc_id == nextProps.newVTC.vtc_id) {\n            this.state.vtcs.splice(i, 1);\n            editted = true;\n          }\n        }\n\n        this.state.vtcsOnDisplay.unshift(nextProps.newVTC);\n\n        if (this.state.vtcs.length != this.state.vtcsOnDisplay.length) {\n          this.state.vtcs.unshift(nextProps.newVTC);\n        }\n      }\n    }\n  }\n\n  render() {\n    if (!this.state.loaded) {\n      for (let i = 0; i < this.props.vtcs.length; i++) {\n        this.state.vtcsOnDisplay.push(this.props.vtcs[i]);\n        this.state.vtcs.push(this.props.vtcs[i].vtc_id);\n      }\n\n      console.log(this.state.vtcs);\n\n      if (this.state.vtcs.length != 0) {\n        this.setState({\n          loaded: true\n        });\n      }\n    } // {/* <Tree /> will fill width/height of its container; in this case `#treeWrapper` */ }\n\n\n    return React.createElement(\"div\", {\n      className: \"custom-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Tree, {\n      animated: true,\n      data: data,\n      height: 800,\n      width: 1200,\n      svgProps: {\n        className: 'custom'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }));\n  }\n\n}\n\nTreeView.propTypes = {\n  fetchVTCS: PropTypes.func.isRequired,\n  vtcs: PropTypes.array.isRequired,\n  newVTC: PropTypes.object,\n  AUTH_TOKEN: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  vtcs: state.vtcs.vtcs,\n  //from index.js in reducers\n  newVTC: state.vtcs.vtc,\n  AUTH_TOKEN: state.login.session_token\n});\n\nexport default connect(mapStateToProps, {\n  fetchVTCS\n})(TreeView);","map":{"version":3,"sources":["/Users/aserna/Desktop/service-prov-dash/src/components/TreeView.js"],"names":["React","Component","Tree","PropTypes","connect","fetchVTCS","data","name","children","TreeView","constructor","props","state","vtcs","vtcsOnDisplay","loaded","componentWillMount","componentWillReceiveProps","nextProps","editted","newVTC","vtc_id","i","length","splice","unshift","render","push","console","log","setState","className","propTypes","func","isRequired","array","object","AUTH_TOKEN","mapStateToProps","vtc","login","session_token"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Tree from 'react-tree-graph';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchVTCS } from '../actions/VTC_Actions';\nimport 'react-tree-graph/dist/style.css'\nimport '../App.css'\n\nlet data = {\n    name: 'Parent',\n    children: [\n        {\n            name: 'Child 1',\n            children: [{ name: 'Child 3 ' }, { name: 'Child 4 ' }, { name: 'Child 5 ' }, { name: 'Child 6 ' }]\n        }\n        , { name: 'Child 2' }\n    ]\n};\n\nclass TreeView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            vtcs: [],\n            vtcsOnDisplay: [], //need 2 different kinds of VTC arrays for search functionality\n            loaded: false\n        }\n    }\n\n    componentWillMount() {\n        this.props.fetchVTCS();\n    }\n\n    componentWillReceiveProps(nextProps) {\n        let editted = false;\n        if (nextProps.newVTC) {\n            if (!(typeof nextProps.newVTC.vtc_id == \"undefined\")) {\n\n                for (var i = 0; i < this.state.vtcsOnDisplay.length; i++) {\n                    if (this.state.vtcsOnDisplay[i].vtc_id == nextProps.newVTC.vtc_id) {\n                        this.state.vtcsOnDisplay.splice(i, 1);\n                        editted = true;\n                    }\n                }\n                for (var i = 0; i < this.state.vtcs.length; i++) {\n                    if (this.state.vtcs[i].vtc_id == nextProps.newVTC.vtc_id) {\n                        this.state.vtcs.splice(i, 1);\n                        editted = true;\n                    }\n                }\n\n                this.state.vtcsOnDisplay.unshift(nextProps.newVTC);\n                if (this.state.vtcs.length != this.state.vtcsOnDisplay.length) {\n                    this.state.vtcs.unshift(nextProps.newVTC);\n                }\n\n            }\n        }\n    }\n\n    render() {\n        if (!this.state.loaded) {\n            for (let i = 0; i < this.props.vtcs.length; i++) {\n                this.state.vtcsOnDisplay.push(this.props.vtcs[i]);\n                this.state.vtcs.push(this.props.vtcs[i].vtc_id);\n            }\n            console.log(this.state.vtcs)\n            if (this.state.vtcs.length != 0) {\n                this.setState({ loaded: true })\n            }\n        }\n        // {/* <Tree /> will fill width/height of its container; in this case `#treeWrapper` */ }\n        return (\n            <div className=\"custom-container\">\n                <Tree\n                    animated\n                    data={data}\n                    height={800}\n                    width={1200}\n                    svgProps={{\n                        className: 'custom'\n                    }} />\n            </div>\n\n\n        )\n    }\n}\n\nTreeView.propTypes = {\n    fetchVTCS: PropTypes.func.isRequired,\n    vtcs: PropTypes.array.isRequired,\n    newVTC: PropTypes.object,\n    AUTH_TOKEN: PropTypes.object\n}\n\nconst mapStateToProps = state => ({\n    vtcs: state.vtcs.vtcs, //from index.js in reducers\n    newVTC: state.vtcs.vtc,\n    AUTH_TOKEN: state.login.session_token\n})\n\nexport default connect(mapStateToProps, { fetchVTCS })(TreeView);"]},"metadata":{},"sourceType":"module"}