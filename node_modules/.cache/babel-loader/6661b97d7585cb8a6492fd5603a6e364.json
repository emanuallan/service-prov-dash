{"ast":null,"code":"import \"antd/es/icon/style/css\";\nimport _Icon from \"antd/es/icon\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport cls from 'classnames';\nimport Context from './Context';\nconst clsPrefix = 'cp-react-org-chart-node';\nexport default class Node extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isDragging: false\n    });\n\n    _defineProperty(this, \"onDragStart\", (e, props) => {\n      const id = props.id;\n      const _this$context = this.context,\n            setIdentify = _this$context.setIdentify,\n            getNodeId = _this$context.getNodeId;\n      getNodeId('draggingNodeProps', props);\n      setIdentify(id, true);\n      this.setState({\n        isDragging: true\n      });\n    });\n\n    _defineProperty(this, \"onDragEnd\", (e, props) => {\n      const id = props.id;\n      const _this$context2 = this.context,\n            setIdentify = _this$context2.setIdentify,\n            getNodeId = _this$context2.getNodeId;\n      this.setState({\n        isDragging: false\n      });\n      getNodeId('willDropNodeId', null);\n      getNodeId('disableDropNodeId', null);\n      getNodeId('draggingNodeProps', null);\n      setIdentify(id, false);\n    });\n\n    _defineProperty(this, \"onDragOver\", (e, props) => {\n      e.preventDefault();\n    });\n\n    _defineProperty(this, \"onDragEnter\", (e, props) => {\n      const id = props.id,\n            droppable = props.droppable;\n      if (!droppable) return;\n      const _this$context3 = this.context,\n            getNodeId = _this$context3.getNodeId,\n            customDrag = _this$context3.customDrag,\n            draggingNodeProps = _this$context3.draggingNodeProps;\n\n      if (customDrag && typeof customDrag === 'function') {\n        const isDrag = customDrag(props, draggingNodeProps);\n\n        if (isDrag) {\n          getNodeId('willDropNodeId', id);\n        } else {\n          getNodeId('disableDropNodeId', id);\n        }\n      } else {\n        getNodeId('willDropNodeId', id);\n      }\n    });\n\n    _defineProperty(this, \"onDragLeave\", (e, props) => {\n      const getNodeId = this.context.getNodeId; // getNodeId('willDropNodeId', null)\n    });\n\n    _defineProperty(this, \"onDrop\", (e, props) => {\n      const droppable = props.droppable;\n      if (!droppable) return;\n      const _this$context4 = this.context,\n            customDrag = _this$context4.customDrag,\n            draggingNodeProps = _this$context4.draggingNodeProps;\n\n      if (customDrag && typeof customDrag === 'function') {\n        const isDrag = customDrag(props, draggingNodeProps);\n        if (!isDrag) return;\n        this.sureDrop(props, draggingNodeProps);\n      } else {\n        this.sureDrop(props, draggingNodeProps);\n      }\n    });\n\n    _defineProperty(this, \"sureDrop\", (dropProps, dragProps) => {\n      const _this$context5 = this.context,\n            moveNode = _this$context5.moveNode,\n            getNodeId = _this$context5.getNodeId;\n      const dropId = dropProps.id;\n      const dragId = dragProps.id;\n      getNodeId('willDropNodeId', null);\n      getNodeId('disableDropNodeId', null);\n      getNodeId('draggingNodeProps', null);\n      getNodeId('didMountNodeId', dragId);\n      moveNode(dropId, dragId);\n    });\n\n    _defineProperty(this, \"onChangeTreeDraggable\", e => {\n      const onChangeTreeDraggable = this.props.onChangeTreeDraggable;\n      onChangeTreeDraggable();\n      e.stopPropagation();\n    });\n  }\n\n  componentDidMount() {}\n\n  getProps() {\n    const dragMode = this.context.dragMode;\n    const props = {\n      onMouseDown(e) {\n        e.stopPropagation();\n      }\n\n    };\n\n    if (dragMode === 'tree') {\n      props.onMouseUp = this.onChangeTreeDraggable;\n      props.onMouseDown = this.onChangeTreeDraggable;\n    }\n\n    if (dragMode === 'node') {\n      props.draggable = true;\n\n      props.onDragEnd = e => this.onDragEnd(e, this.props);\n\n      props.onDragStart = e => this.onDragStart(e, this.props);\n    }\n\n    return props;\n  }\n\n  render() {\n    const isDragging = this.state.isDragging;\n    const _this$props = this.props,\n          droppable = _this$props.droppable,\n          id = _this$props.id;\n    const _this$context6 = this.context,\n          _this$context6$extraR = _this$context6.extraRender,\n          extraRender = _this$context6$extraR === void 0 ? () => {} : _this$context6$extraR,\n          nodeRender = _this$context6.nodeRender,\n          willDropNodeId = _this$context6.willDropNodeId,\n          didMountNodeId = _this$context6.didMountNodeId,\n          disableDropNodeId = _this$context6.disableDropNodeId;\n    const props = this.getProps();\n    const disableDrop = disableDropNodeId === id;\n    const nodeJsx = nodeRender ? nodeRender(this.props) : React.createElement(DefaultNodeRender, this.props);\n    return React.createElement(\"div\", {\n      className: clsPrefix\n    }, React.createElement(\"span\", {\n      className: \"span-wrapper\"\n    }, React.createElement(\"div\", _extends({\n      className: cls(\"node-content\", {\n        'dragging': isDragging,\n        'didMount': didMountNodeId === id,\n        'droppable': droppable,\n        'willDropNode': willDropNodeId === id,\n        'disableDropNode': disableDrop\n      })\n    }, props), React.createElement(\"div\", {\n      onDrop: e => this.onDrop(e, this.props),\n      onDragOver: e => this.onDragOver(e, this.props),\n      onDragEnter: e => this.onDragEnter(e, this.props),\n      onDragLeave: e => this.onDragLeave(e, this.props)\n    }, nodeJsx), disableDrop && React.createElement(\"div\", {\n      className: \"error\"\n    }, React.createElement(_Icon, {\n      type: \"exclamation-circle\"\n    })), React.createElement(\"div\", null, extraRender(this.props)))));\n  }\n\n}\n\n_defineProperty(Node, \"contextType\", Context);\n\nconst DefaultNodeRender = ({\n  id,\n  name\n}) => React.createElement(\"div\", {\n  className: \"default-node-render\"\n}, React.createElement(\"div\", {\n  className: \"id\"\n}, id), React.createElement(\"div\", {\n  className: \"name\"\n}, name));","map":null,"metadata":{},"sourceType":"module"}