{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nconst clsPrefix = 'cp-react-org-chart-chart-wrapper';\nexport default class ChartWrapper extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      scale: 1,\n      isMove: false,\n      translateX: 0,\n      translateY: 0,\n      originX: 0,\n      originY: 0\n    });\n\n    _defineProperty(this, \"onZoom\", e => {\n      const _this$props = this.props,\n            zoom = _this$props.zoom,\n            maxZoom = _this$props.maxZoom,\n            minZoom = _this$props.minZoom,\n            zoomStep = _this$props.zoomStep;\n      if (!zoom) return;\n      const deltaY = e.deltaY,\n            pageX = e.pageX,\n            pageY = e.pageY;\n      const _this$wrapper = this.wrapper,\n            offsetWidth = _this$wrapper.offsetWidth,\n            offsetHeight = _this$wrapper.offsetHeight;\n      let scale = this.state.scale;\n      const _this$state = this.state,\n            translateX = _this$state.translateX,\n            translateY = _this$state.translateY;\n\n      if (deltaY < 0 && scale < maxZoom) {\n        scale += zoomStep;\n      }\n\n      if (deltaY > 0 && scale > minZoom) {\n        scale -= zoomStep;\n      }\n\n      this.setState({\n        scale,\n        originX: pageX,\n        originY: pageY\n      });\n    });\n\n    _defineProperty(this, \"onMouseDown\", e => {\n      this.toggleMove(true);\n      const pageX = e.pageX,\n            pageY = e.pageY;\n      const _this$state2 = this.state,\n            translateX = _this$state2.translateX,\n            translateY = _this$state2.translateY;\n      this.pageX = pageX;\n      this.pageY = pageY;\n      this.translateX = translateX;\n      this.translateY = translateY;\n    });\n\n    _defineProperty(this, \"onMouseUp\", e => {\n      this.toggleMove(false);\n    });\n\n    _defineProperty(this, \"onMouseMove\", e => {\n      const _this$state3 = this.state,\n            isMove = _this$state3.isMove,\n            scale = _this$state3.scale;\n      if (!isMove) return;\n      const pageX = e.pageX,\n            pageY = e.pageY;\n      const x = (pageX - this.pageX) / scale + this.translateX;\n      const y = (pageY - this.pageY) / scale + this.translateY;\n      this.setState({\n        translateX: x,\n        translateY: y\n      });\n    });\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousemove', this.onMouseMove);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousemove', this.onMouseMove);\n  }\n\n  toggleMove(isMove) {\n    this.setState({\n      isMove\n    });\n  }\n\n  getProps() {\n    const _this$props2 = this.props,\n          zoom = _this$props2.zoom,\n          pan = _this$props2.pan;\n    const props = {};\n\n    if (zoom) {\n      props.onWheel = this.onZoom;\n    }\n\n    if (pan) {\n      props.onMouseUp = this.onMouseUp;\n      props.onMouseDown = this.onMouseDown;\n      props.onMouseMove = this.onMouseMove;\n    }\n\n    return props;\n  }\n\n  render() {\n    const children = this.props.children;\n    const _this$state4 = this.state,\n          scale = _this$state4.scale,\n          translateX = _this$state4.translateX,\n          translateY = _this$state4.translateY,\n          isMove = _this$state4.isMove,\n          originX = _this$state4.originX,\n          originY = _this$state4.originY;\n    const cursor = isMove ? 'move' : 'default';\n    const props = this.getProps();\n    return React.createElement(\"div\", {\n      className: clsPrefix,\n      style: {\n        overflow: 'hidden'\n      }\n    }, React.createElement(\"div\", _extends({\n      ref: node => {\n        this.wrapper = node;\n      },\n      style: {\n        cursor,\n        transform: \"scale(\".concat(scale, \") translate(\").concat(translateX, \"px, \").concat(translateY, \"px)\"),\n        transformOrigin: \"\".concat(originX, \"px \").concat(originY, \"px\")\n      },\n      className: \"chart-wrapper-main\"\n    }, props), children));\n  }\n\n}\n\n_defineProperty(ChartWrapper, \"propTypes\", {});\n\n_defineProperty(ChartWrapper, \"defaultProps\", {\n  maxZoom: 2,\n  minZoom: 0.5,\n  zoomStep: 0.03\n});","map":null,"metadata":{},"sourceType":"module"}