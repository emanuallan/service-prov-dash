{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport Node from './Node';\nimport Context from './Context';\nconst unit = 2;\nconst clsPrefix = 'cp-react-org-chart-table';\nexport default class Chart extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      draggable: false\n    });\n\n    _defineProperty(this, \"onChangeTreeDraggable\", () => {\n      const draggable = this.state.draggable;\n      this.setState({\n        draggable: !draggable\n      });\n    });\n\n    _defineProperty(this, \"onDragEnd\", e => {\n      this.onChangeTreeDraggable();\n    });\n\n    _defineProperty(this, \"onDragStart\", (e, props) => {\n      const id = props.id;\n      const setIdentify = this.context.setIdentify;\n      e.dataTransfer.setData('dragId', props.id);\n      setIdentify(id, true);\n      e.stopPropagation();\n    });\n  }\n\n  render() {\n    const data = this.props.data;\n    const draggable = this.state.draggable;\n    const _data$children = data.children,\n          children = _data$children === void 0 ? [] : _data$children;\n    const length = children.length;\n    const colSpan = length * unit;\n    return React.createElement(\"table\", {\n      draggable: false,\n      className: clsPrefix,\n      onDragEnd: this.onDragEnd,\n      onDragStart: e => this.onDragStart(e, this.props.data)\n    }, React.createElement(\"tbody\", null, React.createElement(\"tr\", null, React.createElement(\"td\", {\n      colSpan: colSpan,\n      className: \"td-node\"\n    }, React.createElement(Node, _extends({\n      onChangeTreeDraggable: this.onChangeTreeDraggable\n    }, data)))), React.createElement(LinesTr, {\n      isRender: length > 0\n    }, React.createElement(\"td\", {\n      colSpan: colSpan\n    }, React.createElement(\"div\", {\n      className: \"down-line\"\n    }))), React.createElement(LinesTr, {\n      isRender: length > 0\n    }, React.createElement(Lines, {\n      colSpan: colSpan\n    })), React.createElement(\"tr\", null, children.map(child => {\n      const id = child.id;\n      return React.createElement(\"td\", {\n        key: id,\n        colSpan: 2\n      }, React.createElement(Chart, {\n        data: child\n      }));\n    }))));\n  }\n\n}\n\n_defineProperty(Chart, \"contextType\", Context);\n\nconst Lines = ({\n  colSpan\n}) => {\n  const classNames = [];\n\n  for (let i = 0; i < colSpan; i++) {\n    if (i === 0) {\n      classNames.push('right-line');\n      continue;\n    } else if (i === colSpan - 1) {\n      classNames.push('left-line');\n      continue;\n    } else if (i % 2 === 0) {\n      classNames.push('right-line top-line');\n      continue;\n    } else if (i % 2 === 1) {\n      classNames.push('left-line top-line');\n      continue;\n    }\n  }\n\n  return classNames.map((className, index) => React.createElement(\"td\", {\n    key: index,\n    className: className\n  }));\n};\n\nconst LinesTr = ({\n  children,\n  isRender\n}) => {\n  if (!isRender) return null;\n  return React.createElement(\"tr\", {\n    className: \"lines\"\n  }, children);\n};","map":null,"metadata":{},"sourceType":"module"}